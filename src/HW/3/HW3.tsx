import {ChangeEvent, useState} from 'react';


export const HW3 = () => {
    // 1Ô∏è‚É£ –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ JSX(HW3.tsx) –∏ –≤—ã —É–≤–∏–¥–∏—Ç–µ,
    // —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞—á–Ω–µ—Ç –≥–æ—Ä–µ—Ç—å –∫—Ä–∞—Å–Ω—ã–º –∏ —Ä—É–≥–∞—Ç—å—Å—è üò°
    // 2Ô∏è‚É£ –í–∞—à–∞ –∑–∞–¥–∞—á–∞: ‚ùó–ü–û–ß–ò–ù–ò–¢–¨ –ü–†–û–ï–ö–¢‚ùó
    // - –ø—Ä–æ–ø–∏—Å–∞—Ç—å —Ç–∏–ø–∏–∑–∞—Ü–∏—é, –≥–¥–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
    // - –ø–æ—á–∏–Ω–∏—Ç—å –≤—Å–µ, —á—Ç–æ –≥–æ—Ä–∏—Ç –∫—Ä–∞—Å–Ω—ã–º
    // - –¥–æ–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å (–≥–¥–µ —É–∫–∞–∑–∞–Ω–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏)
    // - –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞—Ç—å—Å—è –∏ –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ

    type TaskPropsType = {
        id:number
        title:string
        isDone:boolean
    }
    const [tasks, setTasks] = useState([
        {id: 1, title: 'zariadka', isDone: false},
        {id: 2, title: 'zavtrak', isDone: false},
        {id: 3, title: 'lesson1', isDone: false}
    ]
    )
    const addTask = (currentText:string) => {
        const newTask = {id: 3, title: currentText, isDone: false}
        setTasks([newTask, ...tasks])
    }

    let [currentText, setCurrentText] = useState('');
    const [texts, setTexts] = useState<string[]>([
        '–¢–æ, —á—Ç–æ –≤—ã –¥–µ–ª–∞–µ—Ç–µ –ø–æ –Ω–æ—á–∞–º, —Ç–æ –∏ –¥–µ–ª–∞–µ—Ç –≤–∞—Å –±–æ–≥–∞—Ç—ã–º. (–ê–ª—å –ö–∞–ø–æ–Ω–µ)',
    ]);

    const handleChange = (event: ChangeEvent<HTMLInputElement>) => {
        currentText = event.currentTarget.value
        //console.log(currentText)

        setCurrentText(currentText);
    };

    const handleSave = () => {
        // –ó–ê–°–ï–¢–ê–¢–¨ –ë–´ –¢–ï–ö–°–¢ –í texts –ò –ù–ï –ü–û–¢–ï–†–Ø–¢–¨ –ù–ê–ü–£–¢–°–¢–í–ò–ï –ò–ó –ü–†–û–®–õ–û–ì–û –í–ï–ö–ê)
        // –ê –ó–ê–¢–ï–ú –£–ë–†–ê–¢–¨ –ó–ê –°–û–ë–û–ô –í currentText
        addTask(currentText)
        setCurrentText(currentText)
        setCurrentText('')
    };

    return (
        <div id={'hw03'}>
            {currentText ? (
                <h1 id={'hw03-text'}>{currentText}</h1>
            ) : (
                <h1 id={'hw03-default-text'}>–ó–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è –Ω–æ–≤–æ–µ –¥–µ–ª–æ</h1> // –Ω–∏—á–µ–≥–æ –Ω–µ –º–µ–Ω—è–µ–º, –∑–¥–µ—Å—å –≤—Å–µ –Ω–æ—Ä–º
            )}

            <input id={'hw03-input'} type="text" value={currentText} onChange={handleChange}/>

            <button id={'hw03-button'} onClick={handleSave}>–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>

            <h1 style={{marginTop: '50px'}}>–°–ü–ò–°–û–ö –î–ï–õ –ù–ê –î–ï–ù–¨:</h1>

            <ol id={'hw03-tasks'}>
              {tasks.map((el, index) => {
                return (
                  <li key={index} id={`hw03-task-${index}`}>
                      <input type='checkbox' checked={el.isDone}/>
                    {el.title}
                  </li>
                );
              })}
            </ol>
        </div>
    );
};
